<snippet>
	<content><![CDATA[
#define Vec Point
const ld EPS = 1e-13;
const ld Pi = 3.14159265358979323846;
int sign(ld x) {
	if (x > EPS) return 1;
	if (x < -EPS) return -1;
	return 0;
}

ld sq(ld x) {
	return x * x;
}

struct Point {
	ld x, y;
	Point() : x(0), y(0) {}
	Point(ld _x, ld _y) : x(_x), y(_y) {}
	Point operator-(const Point& other) const {
		return Point(x - other.x, y - other.y);
	}
	Point operator+(const Point& other) const {
		return Point(x + other.x, y + other.y);
	}
	Point operator*(const ld& other) const {
		return Point(x * other, y * other);
	}
	// векторное произведение sin
	ld operator^(const Point& other) const {
		return x * other.y - y * other.x;
	}
	// скалярное произведение cos
	ld operator*(const Point& other) const {
		return x * other.x + y * other.y;
	}
	ld len2() const {
		return sq(x) + sq(y);
	}
	ld len() const {
		return sqrtl(len2());
	}
	Point norm() const {
		ld d = len();
		return Point(x / d, y / d);
	}
	bool operator<(const Point& other) const {
		if (sign(x - other.x) != 0) {
			return x < other.x;
		}
		else if (sign(y - other.y) != 0) {
			return y < other.y;
		}
		return false;
	}
	bool operator==(const Point& other) const {
		return sign(x - other.x) == 0 && sign(y - other.y) == 0;
	}
	Point ort() {
		return Point(-y, x);
	}
	void deb() const {
		std::cerr << "(" << x << ", " << y << ")" << std::endl;
	}
};
ostream& operator << (ostream& out, const Point& val) {
	return out << val.x << ' ' << val.y;
}
istream& operator >> (istream& in, Point& val) {
	return in >> val.x >> val.y;
}
struct Line {
	ld a, b, c;
	Line() : a(0), b(0), c(0) {}
	Line(const Point& x, const Point& y) : a(y.y - x.y), b(x.x - y.x), c(x.y * y.x - y.y * x.x) {
		/*ld d = Point(a, b).len();
		a /= d, b /= d, c /= d;
		if (sign(a) == -1) {
			a = -a;
			b = -b;
			c = -c;
		}
		else if (sign(a) == 0 && sign(b) == -1) {
			a = 0;
			b = -b;
			c = -c;
		}*/
	}
	Point get() {
		if (sign(b) != 0) {
			return Point(0, -c / b);
		}
		else
			return Point(0, -c);
	}

	bool operator==(const Line& other) const {
		return sign(a - other.a) == 0 && sign(b - other.b) == 0 && sign(c - other.c) == 0;
	}
};

//расстояние от точки до точки
ld dist_points(Point& a, Point& b) {
	return sqrtl(sq(a.x - b.x) + sq(a.y - b.y));
}

// угол между двумя векторами в радианах
ld get_angle(const Vec& a, const Vec& b) {
	return atan2(a ^ b, a * b);
}

// проверка принадлежности точки отрезку
bool is_point_on_seg(const Point& a, const Point& b, const Point& x) {
	// проверка в тупую 
	return sign((a - b).len() - (a - x).len() - (b - x).len()) == 0;
	//if (a == b) {
	//	return a == x;
	//}
	//else if (a == x || b == x) {
	//	return true;
	//}
	//else {
	//	return sign((x - a) ^ (b - a)) == 0 &&
	//		sign((x - a) * (b - a)) == 1 &&
	//		sign((x - b) * (a - b)) == 1;
	//}
}
ld dist_line(const Point& a, const Line& l) {
	return fabs(l.a * a.x + l.b * a.y + l.c) / sqrtl(sq(l.a) + sq(l.b));
}
ld get_dist_line(Point& a, Point& c, Point& d) {
	Line buf(c, d);
	return dist_line(a, buf);
}
ld dist_point_segment(Point& x, Point& c, Point& d) {
	Line check(c, d);
	ld dis = dist_line(x, check);
	Vec k(check.a, check.b);
	k = k * dis;
	Point suba = x + k;
	Point subb = x - k;
	//dis = dist_points(suba, a);
	if (is_point_on_seg(c, d, suba) || is_point_on_seg(c, d, subb)) {
		return dis;
	}
	else {
		return min(dist_points(x, c), dist_points(x, d));
	}
}
ld get_dist_luch(Point& a, Point& c, Point& d) {
	Vec  my = (d - c);
	Vec sec = (a - c);
	if (sign(sec * my) <= 0) {
		return dist_points(a, c);
	}
	else {
		return get_dist_line(a, c, d);
	}
}
bool cmp(Point& lht, Point& rht) {
	if (fabs(lht.x - rht.x) <= EPS) {
		return  lht.y < rht.y;
	}
	return lht.x < rht.x;
}
bool line_cross(const Line& a, const Line& b, Point& ans) {
	ld d = (a.b * b.a - a.a * b.b);
	if (sign(d) == 0)
		return false;
	ans.x = (b.b * a.c - b.c * a.b) / d;
	ans.y = (b.c * a.a - a.c * b.a) / d;
	return true;
}
bool segment_cross(const Point& a, const Point& b, const Point& c, const Point& d) {
	if (sign((a - b) ^ (c - d)) == 0) {
		return is_point_on_seg(a, b, c) ||
			is_point_on_seg(a, b, d) ||
			is_point_on_seg(c, d, a) ||
			is_point_on_seg(c, d, b);
	}
	Point ans;
	if (line_cross(Line(a, b), Line(c, d), ans)) {
		return is_point_on_seg(a, b, ans) && is_point_on_seg(c, d, ans);
	}
}
ld dist_seg_to_seg(Point a, Point b, Point c, Point d) {
	if (segment_cross(a, b, c, d)) {
		return 0;
	}
	return min(min(dist_point_segment(a, c, d), dist_point_segment(b, c, d)), min(dist_point_segment(c, a, b), dist_point_segment(d, a, b)));
}
ld get_dist_seg_to_luch(Point a, Point b, Point c, Point d) {
	Point ans;
	if (line_cross(Line(a, b), Line(c, d), ans)) {
		if (is_point_on_seg(a, b, ans) && sign((ans - c) * (d - c)) == 1) {
			return 0;
		}
	}
	if (Line(a, b) == Line(c, d) && sign((a - c) * (d - c)) >= 0 && sign((d - c) * (b - c)) >= 0) {
		return 0;
	}
	// проверить на равенство прямых
	return min(dist_point_segment(c, a, b), min(get_dist_luch(a, c, d), get_dist_luch(b, c, d)));
}
ld dist_seg_line(Point a, Point b, Point c, Point d) {
	Point ans;
	if (line_cross(Line(a, b), Line(c, d), ans)) {
		if (is_point_on_seg(a, b, ans))
			return 0;
	}
	return min(dist_line(a, Line(c, d)), dist_line(b, Line(c, d)));
}

bool check(Line lht, Line rht) {
	return lht == rht;
}
ld dist_luch_to_luch(Point& a, Point& b, Point& c, Point& d) {
	Point ans;
	if ((sign((b - a) ^ (d - c)) == 0)) {
		if (check(Line(a, b), Line(c, d))) {
			//a  c  b  d
			if (is_point_on_seg(a, b, c)) {
				return 0;
			}
		}
		return min(get_dist_luch(a, c, d), get_dist_luch(c, a, b));
	}
	if (line_cross(Line(a, b), Line(c, d), ans)) {
		if (sign((ans - c) * (d - c)) == 1 && sign((ans - a) * (b - a)) == 1) {
			return 0;
		}
	}
	return min(dist_points(a, c), min(get_dist_luch(a, c, d), get_dist_luch(c, a, b)));
}
ld dist_luch_to_line(Point& a, Point& b, Point& c, Point& d) {
	if (sign((b - a) ^ (d - c)) == 0) {
		if (check(Line(a, b), Line(c, d))) {
			return 0;
		}
		return dist_line(a, Line(c, d));
	}
	Point ans;
	line_cross(Line(a, b), Line(c, d), ans);
	if (sign((ans - a) * (b - a)) == 1)
		return 0;
	else return dist_line(a, Line(c, d));
}
//
//ld dist_line_to_line(Point& a, Point& b, Point& c, Point& d) {
//	Line l1(a, b), l2(c, d);
//	Point ans;
//	if (line_cross(l1, l2,ans))return 0.000000;
//	return fabs(l1.c - l2.c) / sqrtl(sq(l1.a) + sq(l1.b));
//}
ld dist_line_to_line(Point& a, Point& b, Point& c, Point& d) {
	Line l1(a, b), l2(c, d);
	//cout << l1.a << endl << l1.b << endl << l1.c << endl;
	Point ans;
	if (l1 == l2)return (ld)0;
	if (line_cross(l1, l2, ans))return (ld)0;
	if (fabs(l1.b) <= EPS) {
		return (ld)fabs(a.x - c.x);
	}
	else {
		Point sup;
		sup.x = 0;
		sup.y = -(l1.c / l1.b);
		return dist_line(sup, l2);
	}
}
bool cmp(const Point& a, const Point& b) {
	if (sign(a ^ b)) {
		return sign(a ^ b) == 1;
	}
	else {
		return sign(b.len2() - a.len2()) == 1;
	}
}
vector<Point> HULL(vector<Point>& p) {
	if (p.empty())return {};
	int pos = min_element(all(p)) - p.begin();
	swap(p[0], p[pos]);
	for (int i = 1; i < (int)p.size(); i++) {
		p[i] = p[i] - p[0];
	}
	stable_sort(p.begin() + 1, p.end(), cmp);
	for (int i = 1; i < (int)p.size(); i++) {
		p[i] = p[i] + p[0];
	}
	vector<Point> hull;
	for (Point& i : p) {
		while ((int)hull.size() >= 2) {
			int last = (int)hull.size() - 1;
			Vec v1 = hull[last] - hull[last - 1];
			Vec v2 = i - hull[last];
			if (sign(v1 ^ v2) == 1) {
				break;
			}
			hull.pop_back();
		}
		hull.push_back(i);
	}
	return hull;
}

bool is_in_angle(const Point& a, const Point& o, const Point& b, const Point& x) {
	Vec ao = a - o, bo = b - o, xo = x - o;
	return sign((ao ^ xo) * (xo ^ bo)) >= 0 && sign((ao ^ bo) * (ao ^ xo)) >= 0 && sign((ao ^ bo) * (xo ^ bo)) >= 0;
}

bool is_point_in_polygon(vector<Point>& p, const Point& x) {
	int l = 1, r = (int)p.size() - 1;
	if (is_in_angle(p[1], p[0], p[r], x)) {
		while (r - l > 1) {
			int m = (r + l) / 2;
			Vec v1 = p[m] - p[0], v2 = x - p[0];
			if (sign(v1 ^ v2) <= 0) {
				r = m;
			}
			else {
				l = m;
			}
		}
		return is_in_angle(p[0], p[l], p[r], x) && is_in_angle(p[l], p[0], p[r], x) && is_in_angle(p[r], p[0], p[l], x);
	}
	return false;
}
/*
#include <iostream.h>
#include <graphics.h>
#include <math.h>
 
struct MyPoint {float x,y;} O,A; //Наш тип данных
float R=100; //Длина отрезка
 
Функция поворота отрезка
void rotate(float x1, float y1, float& x2, float& y2, float angle)
{
	float dx = x2; //Запоминаем для следующих вычислений
	float dy = y2; //Запоминаем для следующих вычислений

	x2 = x1 + (dx - x1) * cos(angle * M_PI / 180) - (dy - y1) * sin(angle * M_PI / 180); //Поворот на angle градусов
	y2 = y1 + (dx - x1) * sin(angle * M_PI / 180) + (dy - y1) * cos(angle * M_PI / 180); //Поворот на angle градусов

	circle(x1, y1, R); //Это я для себя делал
	line(x1, y1, x2, y2); //Выводим повернутую линию
}

Функция ввода параметров
void input()
{
	O.x = getmaxx() / 2;
	O.y = getmaxy() / 2;
	A.x = O.x + R * cos(90);
	A.y = O.y + R * sin(90);
	line(O.x, O.y, A.x, A.y); //Переместил сюда

	setcolor(3); //Для себя
}

void main()
{
	int gd = DETECT, gm;
	initgraph(&gd, &gm, "");

	input(); //Вводим параметры

	float angle = 90; //Задаем угол
	rotate(O.x, O.y, A.x, A.y, angle); //Поворачиваем точку А отрезка ОА на angle градусов

	cin.get();
	closegraph();
	return;
}
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>advanced_geometry</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
