<snippet>
	<content><![CDATA[
struct SparseTable{
    vector<vector<pll>> table;
    ll logn, n;
 
    SparseTable(ll k) {
        n = k;
        logn = __lg(n);
        table.assign(logn + 1, vector<pll>(n, {INF, INF}));
    }
 
    void build(vector<pll>&a) {
        rep(i, n)
            table[0][i] = a[i];
        rep(i, logn) {
            for(int j = 0; j + (1 << i) <= n; j++) {
                table[i + 1][j] = min(table[i][j], table[i][j + (1 << i)]);
            }
        }
    }
 
    pll get(ll l, ll r) {
        ll log = __lg(r - l + 1);
        return min(table[log][l], table[log][r - (1 << log) + 1]);
    }
};
 
vi visited, tin, tout;
vector<pll> euler;
vvi graph;
 
ll dfs(ll v, ll depth, ll t) {
    visited[v] = 1;
    tin[v] = t;
    euler[t] = {depth, v};
    for (auto&u: graph[v]) {
        if (visited[u]) continue;
        t = dfs(u, depth + 1, t + 1);
        euler[t] = {depth, v};
    }
    tout[v] = t;
    return t + 1;
}
 
void solve() {
    ll n, m; cin >> n >> m;
    visited.assign(n, 0), euler.assign(2 * n - 1, {-1, -1}), tin.assign(n, 0), tout.assign(n, 0), graph.assign(n, {});
    ll rmqs = 2 * n - 1;
    SparseTable sparse(rmqs);
    fi(n - 1) {
        ll a, b; cin >> a >> b; a--; b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    dfs(0, 0, 0);
    sparse.build(euler);
    fi(m) {
        ll x, y; cin >> x >> y;
        x--; y--; if (tin[x] > tin[y]) swap(x, y);
        cout << sparse.get(tin[x], tin[y]).second + 1 << '\n';
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sparse_lca</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
